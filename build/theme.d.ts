import type { IColoringLayer, ITheme, IThemeSettings, IThemeStylesheet } from "./types/index.js";
import { IUiTarget } from "@protorians/core";
import { IAttributes, type IButtonAttributes, type IButtonAttributesBase, type ICommonAttributes, type IWidgetDeclaration, type IWidgetNode, ObjectRounded } from "@protorians/widgets";
import { LayerVariant } from "./enums.js";
import { IThemeSelectOptions, type ThemeAlertOptions, type ThemeButtonOptions, ThemeDialogOptions, type ThemeHelmetOptions, type ThemeLayerOptions, type ThemeBellowMenuBarOptions, type ThemeProgressOptions, type ThemeScrollAreaOptions, type ThemeSheetOptions, type ThemeSkeletonOptions, type ThemeViewOptions, type ThemeAlertDialogOptions, type ThemeAspectRatioOptions, type ThemeAvatarOptions, type IThemeAccordionOptions, type IThemeBadgeOptions, type ThemeAvatarsOptions, type IThemeBreadcrumbOptions, type IThemeCardOptions, ThemeNavbarOptions } from "./composites/index.js";
import { type IModalOptions, type ICarouselOptions, ICarouselCallable } from "./kits/index.js";
import { type IAnimetricGroup, type IAnimetricSlimOptions } from "@protorians/animetric";
export declare class WidgetTheme implements ITheme {
    protected _repository: HTMLStyleElement | undefined;
    protected _settings: Partial<IThemeSettings>;
    protected _stylesheet: IThemeStylesheet | undefined;
    protected prepareSettings(settings: Partial<IThemeSettings>): Partial<IThemeSettings>;
    constructor(settings?: Partial<IThemeSettings>);
    get name(): string;
    get selector(): string;
    get repository(): HTMLStyleElement | undefined;
    get settings(): Partial<IThemeSettings>;
    get stylesheet(): IThemeStylesheet;
    getSetting<K extends keyof IThemeSettings>(name: K): IThemeSettings[K] | undefined;
    setSetting<K extends keyof IThemeSettings>(key: K, value: IThemeSettings[K] | undefined): this;
    setSettings(settings: IThemeSettings): this;
    syncSettings(): this;
    attach(target: IUiTarget<HTMLElement>): this;
    detach(target: IUiTarget<HTMLElement>): this;
    outlineColoringResolves(color: LayerVariant): IColoringLayer;
    coloringResolves(color: LayerVariant): IColoringLayer;
    roundedResolves(rounded: ObjectRounded): string;
    animate(widget: IWidgetNode<any, any>, options: IAnimetricSlimOptions): IAnimetricGroup;
    Accordion(declaration: IThemeAccordionOptions): IWidgetNode<any, any> | undefined;
    Alert(declaration: IWidgetDeclaration<HTMLElement, ICommonAttributes & ThemeAlertOptions>): IWidgetNode<any, any> | undefined;
    AlertDialog(declaration: ThemeAlertDialogOptions): IWidgetNode<any, any> | undefined;
    AspectRatio(declarations: IWidgetDeclaration<HTMLElement, ThemeAspectRatioOptions & ICommonAttributes>): IWidgetNode<any, any> | undefined;
    Avatar(declaration: ThemeAvatarOptions): IWidgetNode<any, any> | undefined;
    Avatars(declaration: ThemeAvatarsOptions): IWidgetNode<any, any> | undefined;
    Badge(declaration: IThemeBadgeOptions): IWidgetNode<any, any> | undefined;
    Breadcrumb(declaration: IThemeBreadcrumbOptions): IWidgetNode<any, any> | undefined;
    Button(declaration: IWidgetDeclaration<HTMLButtonElement, IButtonAttributes & IButtonAttributesBase & ThemeButtonOptions>): import("@protorians/widgets").ButtonWidget;
    Calendar(declaration: any): IWidgetNode<any, any> | undefined;
    Card(declaration: IWidgetDeclaration<HTMLElement, IThemeCardOptions & IAttributes>): IWidgetNode<any, any>;
    Carousel(declaration: ICarouselOptions | ICarouselCallable): IWidgetNode<any, any> | undefined;
    Chart(declaration: any): IWidgetNode<any, any> | undefined;
    Checkbox(declaration: any): IWidgetNode<any, any> | undefined;
    Collapsible(declaration: any): IWidgetNode<any, any> | undefined;
    Combobox(declaration: any): IWidgetNode<any, any> | undefined;
    Command(declaration: any): IWidgetNode<any, any> | undefined;
    ContextMenu(declaration: any): IWidgetNode<any, any> | undefined;
    DataTable(declaration: any): IWidgetNode<any, any> | undefined;
    DatePicker(declaration: any): IWidgetNode<any, any> | undefined;
    Dialog(declaration: ThemeDialogOptions): IWidgetNode<any, any> | undefined;
    Drawer(declaration: any): IWidgetNode<any, any> | undefined;
    DropdownMenu(declaration: any): IWidgetNode<any, any> | undefined;
    Frame(declaration: any): IWidgetNode<any, any> | undefined;
    Helmet(declaration: IWidgetDeclaration<HTMLElement, ICommonAttributes & ThemeHelmetOptions>): IWidgetNode<any, any>;
    HoverCard(declaration: any): IWidgetNode<any, any> | undefined;
    Indicator(declaration: any): IWidgetNode<any, any> | undefined;
    Input(declaration: any): IWidgetNode<any, any> | undefined;
    InputOTP(declaration: any): IWidgetNode<any, any> | undefined;
    Layer(declaration: IWidgetDeclaration<HTMLElement, ThemeLayerOptions & ICommonAttributes>): import("@protorians/widgets").StackWidget;
    List(declaration: any): IWidgetNode<any, any> | undefined;
    Menubar(declaration: any): IWidgetNode<any, any>;
    Modal(declaration: Omit<IWidgetDeclaration<HTMLElement, Partial<IModalOptions> & ICommonAttributes>, 'children'>): any;
    Navbar(declaration: IWidgetDeclaration<HTMLElement, ThemeNavbarOptions & ICommonAttributes>): IWidgetNode<any, any>;
    BellowMenubar(declarations: IWidgetDeclaration<HTMLElement, ThemeBellowMenuBarOptions & ICommonAttributes>): IWidgetNode<any, any>;
    Pagination(declaration: any): IWidgetNode<any, any> | undefined;
    Popover(declaration: any): IWidgetNode<any, any> | undefined;
    Progress(declaration: Omit<IWidgetDeclaration<HTMLElement, ThemeProgressOptions & ICommonAttributes>, 'children'>): IWidgetNode<any, any> | undefined;
    RadioGroup(declaration: any): IWidgetNode<any, any> | undefined;
    Resizable(declaration: any): IWidgetNode<any, any> | undefined;
    ScrollArea(declaration: IWidgetDeclaration<HTMLElement, ThemeScrollAreaOptions & ICommonAttributes>): IWidgetNode<any, any>;
    Select(declaration: IThemeSelectOptions): IWidgetNode<any, any> | undefined;
    Separator(declaration: any): IWidgetNode<any, any> | undefined;
    Sheet(declaration: IWidgetDeclaration<HTMLElement, Partial<ThemeSheetOptions> & ICommonAttributes>): any;
    Sidebar(declaration: any): IWidgetNode<any, any> | undefined;
    Skeleton(declaration: IWidgetDeclaration<HTMLElement, ThemeSkeletonOptions & ICommonAttributes>): import("@protorians/widgets").WidgetNode<HTMLElement, ICommonAttributes>;
    Slider(declaration: any): IWidgetNode<any, any> | undefined;
    Sonner(declaration: any): IWidgetNode<any, any> | undefined;
    Switch(declaration: any): IWidgetNode<any, any> | undefined;
    Table(declaration: any): IWidgetNode<any, any> | undefined;
    Tabs(declaration: any): IWidgetNode<any, any> | undefined;
    Textarea(declaration: any): IWidgetNode<any, any> | undefined;
    Toast(declaration: any): IWidgetNode<any, any> | undefined;
    Toggle(declaration: any): IWidgetNode<any, any> | undefined;
    ToggleGroup(declaration: any): IWidgetNode<any, any> | undefined;
    Tooltip(declaration: any): IWidgetNode<any, any> | undefined;
    View(declaration: IWidgetDeclaration<HTMLElement, ThemeViewOptions & ICommonAttributes>): import("@protorians/widgets").SectionWidget;
}
